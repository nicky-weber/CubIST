""" Convert RA, DEC, and ROLL coordinates to the star camera body frame. Return
    as a quaternion """

    # Standard imports:
    from pathlib import Path
    import logging
    import itertools
    from time import perf_counter as precision_timestamp
    from datetime import datetime

    # External imports:
    import numpy as np
    from numpy.linalg import norm
    import math
    #define phi alpha and delta for testing
def dcm_generator (phi, alpha, delta):
    phi_d = math.radians(phi)
    alpha_d = math.radians(alpha)
    delta_d = math.radians(delta)
    c1 = np.array([1,0,0],[0,math.cos(delta),math.sin(delta)],[0,-1*math.sin(delta),math.cos(delta)])
    c3 = np.array([math.cos(phi),math.sin(phi),0],[-1*math.sin(phi),math.cos(phi),0],[0,0,1])
    c3_2 = np.array([math.cos(alpha),math.sin(alpha),0],[-1*math.sin(alpha),math.cos(alpha),0],[0,0,1])

    #multiply 313 sequence in 2 steps 3*1 then 3*1*3_2
    int = [[sum(a*b for a,b in zip(c3_row, c1_col)) for c1_col in zip(*c1)] for c3_row in c3]

    c313 = [[sum(a*b for a,b in zip(int_row, c3_2_col)) for c2_3_col in zip(*c3_2)] for int_row in int]

    for r in c313:
        print(r)

    return c313
def quat_generator (c313):
    
